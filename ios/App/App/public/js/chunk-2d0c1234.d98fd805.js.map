{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/input-shims-7574994a.js"],"names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","doc","ownerDocument","tx","dir","style","pointerEvents","transform","clone","get","delete","remove","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","addEventListener","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","removeEventListener","SCROLL_ASSIST_SPEED","getScrollData","contentEl","keyboardHeight","itemEl","calcScrollData","getBoundingClientRect","defaultView","innerHeight","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","visibleAreaBottom","Math","min","safeAreaTop","safeAreaBottom","distanceToBottom","distanceToTop","desiredScrollAmount","round","scrollAmount","distance","abs","duration","scrollDuration","max","scrollPadding","inputSafeY","enableScrollAssist","footerEl","coord","touchStart","touchEnd","endCoord","hasPointerMoved","preventDefault","stopPropagation","jsSetFocus","async","scrollData","focus","window","scrollContentTimeout","scrollContent","undefined","clearTimeout","doubleKeyboardEventListener","scrollByPoint","getScrollElement","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","threshold","startCoord","deltaX","x","deltaY","y","PADDING_TIMER_KEY","enableScrollPadding","setScrollPadding","onFocusout","tagName","parentElement","el","timer","setProperty","INPUT_BLURRING","SCROLL_PADDING","startInputShims","config","getNumber","scrollAssist","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","componentOnReady","inputRoot","shadowRoot","querySelector","rmFn","unregisterInput","fn","detail"],"mappings":"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","file":"js/chunk-2d0c1234.d98fd805.js","sourcesContent":["import { a as addEventListener, b as removeEventListener, p as pointerCoord } from './helpers-002e4980.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => { return; };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.addEventListener('ionBlur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  const itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom * 0.75;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round((distanceToBottom < 0)\n    ? -distanceToBottom\n    : (distanceToTop > 0)\n      ? -distanceToTop\n      : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n  let coord;\n  const touchStart = (ev) => {\n    coord = pointerCoord(ev);\n  };\n  const touchEnd = (ev) => {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    }\n    // get where the touchend/mouseup ended\n    const endCoord = pointerCoord(ev);\n    // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      // begin the input focus process\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight);\n    }\n  };\n  componentEl.addEventListener('touchstart', touchStart, true);\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return () => {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n  inputEl.focus();\n  /* tslint:disable-next-line */\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      inputEl.focus();\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await contentEl.getScrollElement();\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > (totalScrollAmount - scrollEl.scrollTop)) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += 50;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n  if (startCoord && endCoord) {\n    const deltaX = (startCoord.x - endCoord.x);\n    const deltaY = (startCoord.y - endCoord.y);\n    const distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > (threshold * threshold);\n  }\n  return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n  const doc = document;\n  const onFocusin = (ev) => {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n  const onFocusout = (ev) => {\n    setScrollPadding(ev.target, 0);\n  };\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return () => {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n  if (input.parentElement &&\n    input.parentElement.parentElement &&\n    input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n    return;\n  }\n  const el = input.closest('ion-content');\n  if (el === null) {\n    return;\n  }\n  const timer = el[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n  }\n  else {\n    el[PADDING_TIMER_KEY] = setTimeout(() => {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config) => {\n  const doc = document;\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', true);\n  const inputBlurring = config.getBoolean('inputBlurring', true);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  const registerInput = async (componentEl) => {\n    if (componentEl.componentOnReady) {\n      await componentEl.componentOnReady();\n    }\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = componentEl.closest('ion-content');\n    const footerEl = (!scrollEl) ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if ( !!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    if ( (!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if ( hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if ( scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"sourceRoot":""}