{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js"],"names":["infiniteScrollCss","InfiniteScroll","hostRef","this","ionInfinite","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","emit","val","lastIndexOf","parseFloat","enableScrollEvents","contentEl","closest","getScrollElement","thresholdChanged","disabledChanged","clientHeight","console","error","undefined","prev","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","mode","class","style","infiniteScrollContentIosCss","infiniteScrollContentMdCss","InfiniteScrollContent","loadingSpinner","get","name","loadingText","innerHTML","ios","md"],"mappings":"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","file":"js/chunk-2d228901.b46f449d.js","sourcesContent":["import { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-e806d1f6.js';\nimport { b as getIonMode, c as config } from './ionic-global-9d5c8ee3.js';\nimport { s as sanitizeDOMString } from './index-9e3fe806.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nconst InfiniteScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n    this.position = 'bottom';\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n      const infiniteHeight = this.el.offsetHeight;\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n      const distanceFromInfinite = (this.position === 'bottom')\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n        : scrollTop - infiniteHeight - threshold;\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      }\n      else {\n        this.didFire = false;\n      }\n      return 4;\n    };\n  }\n  thresholdChanged() {\n    const val = this.threshold;\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = (parseFloat(val) / 100);\n    }\n    else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n  disabledChanged() {\n    const disabled = this.disabled;\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n    this.enableScrollEvents(!disabled);\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    this.scrollEl = await contentEl.getScrollElement();\n    this.thresholdChanged();\n    this.disabledChanged();\n    if (this.position === 'top') {\n      writeTask(() => {\n        if (this.scrollEl) {\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n        }\n      });\n    }\n  }\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n  async complete() {\n    const scrollEl = this.scrollEl;\n    if (!this.isLoading || !scrollEl) {\n      return;\n    }\n    this.isLoading = false;\n    if (this.position === 'top') {\n      /**\n       * New content is being added at the top, but the scrollTop position stays the same,\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n       * (Frame 1)\n       *    - complete() is called, but the UI hasn't had time to update yet.\n       *    - Save the current content dimensions.\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\n       * (Frame 2)\n       *    - Read the new content dimensions.\n       *    - Calculate the height difference and the new scroll position.\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n       * (Still frame 2, if I'm correct)\n       *    - Change the scroll position (= visually maintain the scroll position).\n       *    - Change the state to re-enable the InfiniteScroll.\n       *    - This should be after changing the scroll position, or it could\n       *    cause the InfiniteScroll to be triggered again immediately.\n       * (Frame 3)\n       *    Done.\n       */\n      this.isBusy = true;\n      // ******** DOM READ ****************\n      // Save the current content dimensions before the UI updates\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n      // ******** DOM READ ****************\n      requestAnimationFrame(() => {\n        readTask(() => {\n          // UI has updated, save the new content dimensions\n          const scrollHeight = scrollEl.scrollHeight;\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n          const newScrollTop = scrollHeight - prev;\n          // ******** DOM WRITE ****************\n          requestAnimationFrame(() => {\n            writeTask(() => {\n              scrollEl.scrollTop = newScrollTop;\n              this.isBusy = false;\n            });\n          });\n        });\n      });\n    }\n  }\n  canStart() {\n    return (!this.disabled &&\n      !this.isBusy &&\n      !!this.scrollEl &&\n      !this.isLoading);\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      }\n      else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return (h(Host, { class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled\n      } }));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"threshold\": [\"thresholdChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n};\nInfiniteScroll.style = infiniteScrollCss;\n\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:flex;flex-direction:column;justify-content:center;min-height:84px;text-align:center;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports (margin-inline-start: 0) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:flex;flex-direction:column;justify-content:center;min-height:84px;text-align:center;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports (margin-inline-start: 0) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst InfiniteScrollContent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  componentDidLoad() {\n    if (this.loadingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        // Used internally for styling\n        [`infinite-scroll-content-${mode}`]: true\n      } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n  }\n};\nInfiniteScrollContent.style = {\n  ios: infiniteScrollContentIosCss,\n  md: infiniteScrollContentMdCss\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"],"sourceRoot":""}