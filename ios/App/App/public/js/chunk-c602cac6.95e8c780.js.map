{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/ion-textarea.entry.js","webpack:///./node_modules/@ionic/core/dist/esm/theme-ff3fc52f.js"],"names":["textareaIosCss","textareaMdCss","Textarea","hostRef","this","ionChange","ionInput","ionStyle","ionBlur","ionFocus","inputId","textareaIds","didBlurAfterEdit","fireFocusEvents","hasFocus","autocapitalize","autofocus","clearOnEdit","debounce","disabled","name","readonly","required","spellcheck","autoGrow","value","onInput","ev","nativeInput","emitStyle","emit","onFocus","focusChange","onBlur","onKeyDown","checkClearOnEdit","getValue","runAutoGrow","debounceChanged","document","dispatchEvent","CustomEvent","detail","el","style","height","scrollHeight","textareaWrapper","focus","blur","Promise","resolve","placeholder","hasValue","mode","labelId","label","id","class","color","ref","autoCapitalize","autoFocus","enterKeyHint","enterkeyhint","inputMode","inputmode","maxLength","maxlength","minLength","minlength","readOnly","cols","rows","wrap","ios","md","hostContext","selector","closest","createColorClasses","cssClassMap","length","Object","assign","getClassList","classes","undefined","array","Array","isArray","split","filter","c","map","trim","getClassMap","forEach","SCHEME","openURL","async","url","direction","animation","test","router","querySelector","preventDefault","push"],"mappings":"kHAAA,wGAKA,MAAMA,EAAiB,qyFAEjBC,EAAgB,s0FAEhBC,EAAW,MACf,YAAYC,GACV,eAAiBC,KAAMD,GACvBC,KAAKC,UAAY,eAAYD,KAAM,YAAa,GAChDA,KAAKE,SAAW,eAAYF,KAAM,WAAY,GAC9CA,KAAKG,SAAW,eAAYH,KAAM,WAAY,GAC9CA,KAAKI,QAAU,eAAYJ,KAAM,UAAW,GAC5CA,KAAKK,SAAW,eAAYL,KAAM,WAAY,GAC9CA,KAAKM,QAAU,gBAAgBC,IAC/BP,KAAKQ,kBAAmB,EASxBR,KAAKS,iBAAkB,EACvBT,KAAKU,UAAW,EAIhBV,KAAKW,eAAiB,OAItBX,KAAKY,WAAY,EAIjBZ,KAAKa,aAAc,EAInBb,KAAKc,SAAW,EAIhBd,KAAKe,UAAW,EAIhBf,KAAKgB,KAAOhB,KAAKM,QAIjBN,KAAKiB,UAAW,EAIhBjB,KAAKkB,UAAW,EAIhBlB,KAAKmB,YAAa,EAIlBnB,KAAKoB,UAAW,EAIhBpB,KAAKqB,MAAQ,GACbrB,KAAKsB,QAAWC,IACVvB,KAAKwB,cACPxB,KAAKqB,MAAQrB,KAAKwB,YAAYH,OAEhCrB,KAAKyB,YACLzB,KAAKE,SAASwB,KAAKH,IAErBvB,KAAK2B,QAAWJ,IACdvB,KAAKU,UAAW,EAChBV,KAAK4B,cACD5B,KAAKS,iBACPT,KAAKK,SAASqB,KAAKH,IAGvBvB,KAAK6B,OAAUN,IACbvB,KAAKU,UAAW,EAChBV,KAAK4B,cACD5B,KAAKS,iBACPT,KAAKI,QAAQsB,KAAKH,IAGtBvB,KAAK8B,UAAY,KACf9B,KAAK+B,oBAGT,kBACE/B,KAAKC,UAAY,eAAcD,KAAKC,UAAWD,KAAKc,UAEtD,kBACEd,KAAKyB,YAKP,eACE,MAAMD,EAAcxB,KAAKwB,YACnBH,EAAQrB,KAAKgC,WACfR,GAAeA,EAAYH,QAAUA,IACvCG,EAAYH,MAAQA,GAEtBrB,KAAKiC,cACLjC,KAAKyB,YACLzB,KAAKC,UAAUyB,KAAK,CAAEL,UAExB,oBACErB,KAAKyB,YACLzB,KAAKkC,kBAEHC,SAASC,cAAc,IAAIC,YAAY,kBAAmB,CACxDC,OAAQtC,KAAKuC,MAInB,uBAEIJ,SAASC,cAAc,IAAIC,YAAY,oBAAqB,CAC1DC,OAAQtC,KAAKuC,MAInB,mBACE,eAAI,IAAMvC,KAAKiC,eAEjB,cACE,MAAMT,EAAcxB,KAAKwB,YACrBA,GAAexB,KAAKoB,UACtB,eAAS,KACPI,EAAYgB,MAAMC,OAAS,OAC3BjB,EAAYgB,MAAMC,OAASjB,EAAYkB,aAAe,KAClD1C,KAAK2C,kBACP3C,KAAK2C,gBAAgBH,MAAMC,OAASjB,EAAYkB,aAAe,QASvE,iBACM1C,KAAKwB,aACPxB,KAAKwB,YAAYoB,QAQrB,gBACM5C,KAAKwB,aACPxB,KAAKwB,YAAYqB,OAMrB,kBACE,OAAOC,QAAQC,QAAQ/C,KAAKwB,aAE9B,YACExB,KAAKG,SAASuB,KAAK,CACjB,aAAe,EACf,UAAY,EACZ,OAAS,EACT,uBAAwB1B,KAAKe,SAC7B,kBAAuC,MAApBf,KAAKgD,YACxB,YAAahD,KAAKiD,WAClB,YAAajD,KAAKU,WAMtB,mBACOV,KAAKa,cAINb,KAAKQ,kBAAoBR,KAAKiD,aAEhCjD,KAAKqB,MAAQ,IAGfrB,KAAKQ,kBAAmB,GAE1B,cAEMR,KAAKa,cAAgBb,KAAKU,UAAYV,KAAKiD,aAC7CjD,KAAKQ,kBAAmB,GAE1BR,KAAKyB,YAEP,WACE,MAA2B,KAApBzB,KAAKgC,WAEd,WACE,OAAOhC,KAAKqB,OAAS,GAEvB,SACE,MAAM6B,EAAO,eAAWlD,MAClBqB,EAAQrB,KAAKgC,WACbmB,EAAUnD,KAAKM,QAAU,OACzB8C,EAAQ,eAAcpD,KAAKuC,IAIjC,OAHIa,IACFA,EAAMC,GAAKF,GAEL,cAAD,CAAG,OAAM,CAAE,gBAAiBnD,KAAKe,SAAW,OAAS,KAAMuC,MAAO,eAAmBtD,KAAKuD,MAAO,CACpG,CAACL,IAAO,KACJ,eAAE,MAAO,CAAEI,MAAO,mBAAoBE,IAAKjB,GAAMvC,KAAK2C,gBAAkBJ,GAAM,eAAE,WAAY,CAAEe,MAAO,kBAAmB,kBAAmBH,EAASK,IAAKjB,GAAMvC,KAAKwB,YAAce,EAAIkB,eAAgBzD,KAAKW,eAAgB+C,UAAW1D,KAAKY,UAAW+C,aAAc3D,KAAK4D,aAAcC,UAAW7D,KAAK8D,UAAW/C,SAAUf,KAAKe,SAAUgD,UAAW/D,KAAKgE,UAAWC,UAAWjE,KAAKkE,UAAWlD,KAAMhB,KAAKgB,KAAMgC,YAAahD,KAAKgD,aAAe,GAAImB,SAAUnE,KAAKiB,SAAUC,SAAUlB,KAAKkB,SAAUC,WAAYnB,KAAKmB,WAAYiD,KAAMpE,KAAKoE,KAAMC,KAAMrE,KAAKqE,KAAMC,KAAMtE,KAAKsE,KAAMhD,QAAStB,KAAKsB,QAASO,OAAQ7B,KAAK6B,OAAQF,QAAS3B,KAAK2B,QAASG,UAAW9B,KAAK8B,WAAaT,KAEnqB,SAAW,OAAO,eAAWrB,MAC7B,sBAAwB,MAAO,CAC7B,SAAY,CAAC,mBACb,SAAY,CAAC,mBACb,MAAS,CAAC,mBAGd,IAAIO,EAAc,EAClBT,EAAS0C,MAAQ,CACf+B,IAAK3E,EACL4E,GAAI3E,I,kCC1ON,8IAAM4E,EAAc,CAACC,EAAUnC,IACG,OAAzBA,EAAGoC,QAAQD,GAKdE,EAAqB,CAACrB,EAAOsB,IACR,kBAAVtB,GAAsBA,EAAMuB,OAAS,EAAKC,OAAOC,OAAO,CAAE,aAAa,EAAM,CAAC,aAAazB,IAAU,GAAQsB,GAAeA,EAEvII,EAAgBC,IACpB,QAAgBC,IAAZD,EAAuB,CACzB,MAAME,EAAQC,MAAMC,QAAQJ,GAAWA,EAAUA,EAAQK,MAAM,KAC/D,OAAOH,EACJI,OAAOC,GAAU,MAALA,GACZC,IAAID,GAAKA,EAAEE,QACXH,OAAOC,GAAW,KAANA,GAEjB,MAAO,IAEHG,EAAeV,IACnB,MAAMQ,EAAM,GAEZ,OADAT,EAAaC,GAASW,QAAQJ,GAAKC,EAAID,IAAK,GACrCC,GAEHI,EAAS,uBACTC,EAAUC,MAAOC,EAAK1E,EAAI2E,EAAWC,KACzC,GAAW,MAAPF,GAA0B,MAAXA,EAAI,KAAeH,EAAOM,KAAKH,GAAM,CACtD,MAAMI,EAASlE,SAASmE,cAAc,cACtC,GAAID,EAIF,OAHU,MAAN9E,GACFA,EAAGgF,iBAEEF,EAAOG,KAAKP,EAAKC,EAAWC,GAGvC,OAAO","file":"js/chunk-c602cac6.95e8c780.js","sourcesContent":["import { r as registerInstance, e as createEvent, f as readTask, h, H as Host, i as getElement } from './index-e806d1f6.js';\nimport { b as getIonMode } from './ionic-global-9d5c8ee3.js';\nimport { d as debounceEvent, r as raf, f as findItemLabel } from './helpers-002e4980.js';\nimport { c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst textareaIosCss = \".sc-ion-textarea-ios-h{--background:initial;--color:initial;--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--padding-start:0;--border-radius:0;display:block;position:relative;flex:1;width:100%;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);white-space:pre-wrap;z-index:2;box-sizing:border-box}.ion-color.sc-ion-textarea-ios-h{background:initial}.ion-color.sc-ion-textarea-ios-h{color:var(--ion-color-base)}ion-item.sc-ion-textarea-ios-h,ion-item .sc-ion-textarea-ios-h{align-self:baseline}ion-item.sc-ion-textarea-ios-h:not(.item-label),ion-item:not(.item-label) .sc-ion-textarea-ios-h{--padding-start:0}.textarea-wrapper.sc-ion-textarea-ios{min-width:inherit;max-width:inherit;min-height:inherit;max-height:inherit}.native-textarea.sc-ion-textarea-ios{border-radius:var(--border-radius);margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:block;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;box-sizing:border-box;resize:none;appearance:none}@supports (margin-inline-start: 0) or (-webkit-margin-start: 0){.native-textarea.sc-ion-textarea-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-textarea.sc-ion-textarea-ios::placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea[disabled].sc-ion-textarea-ios{opacity:0.4}.cloned-input.sc-ion-textarea-ios{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-textarea-ios .cloned-input.sc-ion-textarea-ios,[dir=rtl].sc-ion-textarea-ios-h .cloned-input.sc-ion-textarea-ios,[dir=rtl] .sc-ion-textarea-ios-h .cloned-input.sc-ion-textarea-ios{left:unset;right:unset;right:0}.sc-ion-textarea-ios-h{--padding-top:10px;--padding-end:10px;--padding-bottom:10px;--padding-start:0;font-size:inherit}.item-label-stacked.sc-ion-textarea-ios-h,.item-label-stacked .sc-ion-textarea-ios-h,.item-label-floating.sc-ion-textarea-ios-h,.item-label-floating .sc-ion-textarea-ios-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0px}\";\n\nconst textareaMdCss = \".sc-ion-textarea-md-h{--background:initial;--color:initial;--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--padding-start:0;--border-radius:0;display:block;position:relative;flex:1;width:100%;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);white-space:pre-wrap;z-index:2;box-sizing:border-box}.ion-color.sc-ion-textarea-md-h{background:initial}.ion-color.sc-ion-textarea-md-h{color:var(--ion-color-base)}ion-item.sc-ion-textarea-md-h,ion-item .sc-ion-textarea-md-h{align-self:baseline}ion-item.sc-ion-textarea-md-h:not(.item-label),ion-item:not(.item-label) .sc-ion-textarea-md-h{--padding-start:0}.textarea-wrapper.sc-ion-textarea-md{min-width:inherit;max-width:inherit;min-height:inherit;max-height:inherit}.native-textarea.sc-ion-textarea-md{border-radius:var(--border-radius);margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:block;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;box-sizing:border-box;resize:none;appearance:none}@supports (margin-inline-start: 0) or (-webkit-margin-start: 0){.native-textarea.sc-ion-textarea-md{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-textarea.sc-ion-textarea-md::placeholder{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-textarea[disabled].sc-ion-textarea-md{opacity:0.4}.cloned-input.sc-ion-textarea-md{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-textarea-md .cloned-input.sc-ion-textarea-md,[dir=rtl].sc-ion-textarea-md-h .cloned-input.sc-ion-textarea-md,[dir=rtl] .sc-ion-textarea-md-h .cloned-input.sc-ion-textarea-md{left:unset;right:unset;right:0}.sc-ion-textarea-md-h{--padding-top:10px;--padding-end:0;--padding-bottom:11px;--padding-start:8px;margin-left:0;margin-right:0;margin-top:8px;margin-bottom:0;font-size:inherit}.item-label-stacked.sc-ion-textarea-md-h,.item-label-stacked .sc-ion-textarea-md-h,.item-label-floating.sc-ion-textarea-md-h,.item-label-floating .sc-ion-textarea-md-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0}\";\n\nconst Textarea = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionInput = createEvent(this, \"ionInput\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.inputId = `ion-textarea-${textareaIds++}`;\n    this.didBlurAfterEdit = false;\n    /**\n     * This is required for a WebKit bug which requires us to\n     * blur and focus an input to properly focus the input in\n     * an item with delegatesFocus. It will no longer be needed\n     * with iOS 14.\n     *\n     * @internal\n     */\n    this.fireFocusEvents = true;\n    this.hasFocus = false;\n    /**\n     * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n     */\n    this.autocapitalize = 'none';\n    /**\n     * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n     */\n    this.autofocus = false;\n    /**\n     * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.\n     */\n    this.clearOnEdit = false;\n    /**\n     * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.\n     */\n    this.debounce = 0;\n    /**\n     * If `true`, the user cannot interact with the textarea.\n     */\n    this.disabled = false;\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n    this.name = this.inputId;\n    /**\n     * If `true`, the user cannot modify the value.\n     */\n    this.readonly = false;\n    /**\n     * If `true`, the user must fill in a value before submitting a form.\n     */\n    this.required = false;\n    /**\n     * If `true`, the element will have its spelling and grammar checked.\n     */\n    this.spellcheck = false;\n    /**\n     * If `true`, the element height will increase based on the value.\n     */\n    this.autoGrow = false;\n    /**\n     * The value of the textarea.\n     */\n    this.value = '';\n    this.onInput = (ev) => {\n      if (this.nativeInput) {\n        this.value = this.nativeInput.value;\n      }\n      this.emitStyle();\n      this.ionInput.emit(ev);\n    };\n    this.onFocus = (ev) => {\n      this.hasFocus = true;\n      this.focusChange();\n      if (this.fireFocusEvents) {\n        this.ionFocus.emit(ev);\n      }\n    };\n    this.onBlur = (ev) => {\n      this.hasFocus = false;\n      this.focusChange();\n      if (this.fireFocusEvents) {\n        this.ionBlur.emit(ev);\n      }\n    };\n    this.onKeyDown = () => {\n      this.checkClearOnEdit();\n    };\n  }\n  debounceChanged() {\n    this.ionChange = debounceEvent(this.ionChange, this.debounce);\n  }\n  disabledChanged() {\n    this.emitStyle();\n  }\n  /**\n   * Update the native input element when the value changes\n   */\n  valueChanged() {\n    const nativeInput = this.nativeInput;\n    const value = this.getValue();\n    if (nativeInput && nativeInput.value !== value) {\n      nativeInput.value = value;\n    }\n    this.runAutoGrow();\n    this.emitStyle();\n    this.ionChange.emit({ value });\n  }\n  connectedCallback() {\n    this.emitStyle();\n    this.debounceChanged();\n    {\n      document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n        detail: this.el\n      }));\n    }\n  }\n  disconnectedCallback() {\n    {\n      document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n        detail: this.el\n      }));\n    }\n  }\n  componentDidLoad() {\n    raf(() => this.runAutoGrow());\n  }\n  runAutoGrow() {\n    const nativeInput = this.nativeInput;\n    if (nativeInput && this.autoGrow) {\n      readTask(() => {\n        nativeInput.style.height = 'auto';\n        nativeInput.style.height = nativeInput.scrollHeight + 'px';\n        if (this.textareaWrapper) {\n          this.textareaWrapper.style.height = nativeInput.scrollHeight + 'px';\n        }\n      });\n    }\n  }\n  /**\n   * Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\n   * `textarea.focus()`.\n   */\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n  /**\n   * Sets blur on the native `textarea` in `ion-textarea`. Use this method instead of the global\n   * `textarea.blur()`.\n   * @internal\n   */\n  async setBlur() {\n    if (this.nativeInput) {\n      this.nativeInput.blur();\n    }\n  }\n  /**\n   * Returns the native `<textarea>` element used under the hood.\n   */\n  getInputElement() {\n    return Promise.resolve(this.nativeInput);\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      'interactive': true,\n      'textarea': true,\n      'input': true,\n      'interactive-disabled': this.disabled,\n      'has-placeholder': this.placeholder != null,\n      'has-value': this.hasValue(),\n      'has-focus': this.hasFocus\n    });\n  }\n  /**\n   * Check if we need to clear the text input if clearOnEdit is enabled\n   */\n  checkClearOnEdit() {\n    if (!this.clearOnEdit) {\n      return;\n    }\n    // Did the input value change after it was blurred and edited?\n    if (this.didBlurAfterEdit && this.hasValue()) {\n      // Clear the input\n      this.value = '';\n    }\n    // Reset the flag\n    this.didBlurAfterEdit = false;\n  }\n  focusChange() {\n    // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n    if (this.clearOnEdit && !this.hasFocus && this.hasValue()) {\n      this.didBlurAfterEdit = true;\n    }\n    this.emitStyle();\n  }\n  hasValue() {\n    return this.getValue() !== '';\n  }\n  getValue() {\n    return this.value || '';\n  }\n  render() {\n    const mode = getIonMode(this);\n    const value = this.getValue();\n    const labelId = this.inputId + '-lbl';\n    const label = findItemLabel(this.el);\n    if (label) {\n      label.id = labelId;\n    }\n    return (h(Host, { \"aria-disabled\": this.disabled ? 'true' : null, class: createColorClasses(this.color, {\n        [mode]: true,\n      }) }, h(\"div\", { class: \"textarea-wrapper\", ref: el => this.textareaWrapper = el }, h(\"textarea\", { class: \"native-textarea\", \"aria-labelledby\": labelId, ref: el => this.nativeInput = el, autoCapitalize: this.autocapitalize, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, disabled: this.disabled, maxLength: this.maxlength, minLength: this.minlength, name: this.name, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck, cols: this.cols, rows: this.rows, wrap: this.wrap, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeyDown }, value))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"debounce\": [\"debounceChanged\"],\n    \"disabled\": [\"disabledChanged\"],\n    \"value\": [\"valueChanged\"]\n  }; }\n};\nlet textareaIds = 0;\nTextarea.style = {\n  ios: textareaIosCss,\n  md: textareaMdCss\n};\n\nexport { Textarea as ion_textarea };\n","const hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return (typeof color === 'string' && color.length > 0) ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter(c => c != null)\n      .map(c => c.trim())\n      .filter(c => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach(c => map[c] = true);\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"sourceRoot":""}