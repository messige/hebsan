{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/haptic-27b3f981.js","webpack:///./node_modules/@ionic/core/dist/esm/ion-reorder_2.entry.js"],"names":["HapticEngine","win","window","Capacitor","isPluginAvailable","Plugins","Haptics","this","getEngine","TapticEngine","options","engine","style","isCapacitor","toUpperCase","impact","notification","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticSelection","selection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","reorderIosCss","reorderMdCss","Reorder","hostRef","ev","reorderGroup","el","closest","preventDefault","disabled","stopImmediatePropagation","mode","reorderIcon","class","name","lazy","part","ios","md","reorderGroupCss","ReorderGroup","ionItemReorder","lastToIndex","cachedHeights","scrollElTop","scrollElBottom","scrollElInitial","containerTop","containerBottom","state","gesture","enable","contentEl","scrollEl","getScrollElement","createGesture","gestureName","gesturePriority","threshold","direction","passive","canStart","detail","onStart","onMove","onEnd","disabledChanged","destroy","undefined","listOrReorder","Promise","resolve","completeSync","selectedItemEl","target","event","reorderEl","item","findReorderItem","data","heights","length","children","sum","i","child","offsetHeight","push","$ionIndex","box","getBoundingClientRect","top","bottom","scrollBox","scrollTop","AUTO_SCROLL_MARGIN","indexForItem","selectedItemHeight","classList","add","ITEM_REORDER_SELECTED","selectedItem","scroll","autoscroll","currentY","Math","max","min","deltaY","startY","normalizedY","toIndex","itemIndexForTop","fromIndex","reorderMove","transform","emit","from","to","complete","bind","len","ref","insertBefore","Array","isArray","reorderArray","transition","remove","itemHeight","value","posY","amount","SCROLL_JUMP","scrollBy","element","node","container","parent","parentElement","array","splice","slice"],"mappings":"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","file":"js/chunk-06a7f5c0.006a184d.js","sourcesContent":["const HapticEngine = {\n  getEngine() {\n    const win = window;\n    return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n  },\n  available() {\n    return !!this.getEngine();\n  },\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({ style });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({ style });\n  },\n  selection() {\n    this.impact({ style: 'light' });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    }\n    else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    }\n    else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    }\n    else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n","import { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-e806d1f6.js';\nimport { b as getIonMode } from './ionic-global-9d5c8ee3.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-27b3f981.js';\n\nconst reorderIosCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:34px;opacity:0.4}\";\n\nconst reorderMdCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:31px;opacity:0.3}\";\n\nconst Reorder = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  onClick(ev) {\n    const reorderGroup = this.el.closest('ion-reorder-group');\n    ev.preventDefault();\n    // Only stop event propagation if the reorder is inside of an enabled\n    // reorder group. This allows interaction with clickable children components.\n    if (!reorderGroup || !reorderGroup.disabled) {\n      ev.stopImmediatePropagation();\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const reorderIcon = mode === 'ios' ? 'reorder-three-outline' : 'reorder-two-sharp';\n    return (h(Host, { class: mode }, h(\"slot\", null, h(\"ion-icon\", { name: reorderIcon, lazy: false, class: \"reorder-icon\", part: \"icon\" }))));\n  }\n  get el() { return getElement(this); }\n};\nReorder.style = {\n  ios: reorderIosCss,\n  md: reorderMdCss\n};\n\nconst reorderGroupCss = \".reorder-list-active>*{transition:transform 300ms;will-change:transform}.reorder-enabled{user-select:none}.reorder-enabled ion-reorder{display:block;cursor:grab;pointer-events:all;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:grabbing}.reorder-selected{position:relative;transition:none !important;box-shadow:0 0 10px rgba(0, 0, 0, 0.4);opacity:0.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{transform:translate3d(0,  0,  0)}\";\n\nconst ReorderGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\n    this.lastToIndex = -1;\n    this.cachedHeights = [];\n    this.scrollElTop = 0;\n    this.scrollElBottom = 0;\n    this.scrollElInitial = 0;\n    this.containerTop = 0;\n    this.containerBottom = 0;\n    this.state = 0 /* Idle */;\n    /**\n     * If `true`, the reorder will be hidden.\n     */\n    this.disabled = true;\n  }\n  disabledChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.disabled);\n    }\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (contentEl) {\n      this.scrollEl = await contentEl.getScrollElement();\n    }\n    this.gesture = (await import('./index-f49d994d.js')).createGesture({\n      el: this.el,\n      gestureName: 'reorder',\n      gesturePriority: 110,\n      threshold: 0,\n      direction: 'y',\n      passive: false,\n      canStart: detail => this.canStart(detail),\n      onStart: ev => this.onStart(ev),\n      onMove: ev => this.onMove(ev),\n      onEnd: () => this.onEnd(),\n    });\n    this.disabledChanged();\n  }\n  disconnectedCallback() {\n    this.onEnd();\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  }\n  /**\n   * Completes the reorder operation. Must be called by the `ionItemReorder` event.\n   *\n   * If a list of items is passed, the list will be reordered and returned in the\n   * proper order.\n   *\n   * If no parameters are passed or if `true` is passed in, the reorder will complete\n   * and the item will remain in the position it was dragged to. If `false` is passed,\n   * the reorder will complete and the item will bounce back to its original position.\n   *\n   * @param listOrReorder A list of items to be sorted and returned in the new order or a\n   * boolean of whether or not the reorder should reposition the item.\n   */\n  complete(listOrReorder) {\n    return Promise.resolve(this.completeSync(listOrReorder));\n  }\n  canStart(ev) {\n    if (this.selectedItemEl || this.state !== 0 /* Idle */) {\n      return false;\n    }\n    const target = ev.event.target;\n    const reorderEl = target.closest('ion-reorder');\n    if (!reorderEl) {\n      return false;\n    }\n    const item = findReorderItem(reorderEl, this.el);\n    if (!item) {\n      return false;\n    }\n    ev.data = item;\n    return true;\n  }\n  onStart(ev) {\n    ev.event.preventDefault();\n    const item = this.selectedItemEl = ev.data;\n    const heights = this.cachedHeights;\n    heights.length = 0;\n    const el = this.el;\n    const children = el.children;\n    if (!children || children.length === 0) {\n      return;\n    }\n    let sum = 0;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      sum += child.offsetHeight;\n      heights.push(sum);\n      child.$ionIndex = i;\n    }\n    const box = el.getBoundingClientRect();\n    this.containerTop = box.top;\n    this.containerBottom = box.bottom;\n    if (this.scrollEl) {\n      const scrollBox = this.scrollEl.getBoundingClientRect();\n      this.scrollElInitial = this.scrollEl.scrollTop;\n      this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\n      this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\n    }\n    else {\n      this.scrollElInitial = 0;\n      this.scrollElTop = 0;\n      this.scrollElBottom = 0;\n    }\n    this.lastToIndex = indexForItem(item);\n    this.selectedItemHeight = item.offsetHeight;\n    this.state = 1 /* Active */;\n    item.classList.add(ITEM_REORDER_SELECTED);\n    hapticSelectionStart();\n  }\n  onMove(ev) {\n    const selectedItem = this.selectedItemEl;\n    if (!selectedItem) {\n      return;\n    }\n    // Scroll if we reach the scroll margins\n    const scroll = this.autoscroll(ev.currentY);\n    // // Get coordinate\n    const top = this.containerTop - scroll;\n    const bottom = this.containerBottom - scroll;\n    const currentY = Math.max(top, Math.min(ev.currentY, bottom));\n    const deltaY = scroll + currentY - ev.startY;\n    const normalizedY = currentY - top;\n    const toIndex = this.itemIndexForTop(normalizedY);\n    if (toIndex !== this.lastToIndex) {\n      const fromIndex = indexForItem(selectedItem);\n      this.lastToIndex = toIndex;\n      hapticSelectionChanged();\n      this.reorderMove(fromIndex, toIndex);\n    }\n    // Update selected item position\n    selectedItem.style.transform = `translateY(${deltaY}px)`;\n  }\n  onEnd() {\n    const selectedItemEl = this.selectedItemEl;\n    this.state = 2 /* Complete */;\n    if (!selectedItemEl) {\n      this.state = 0 /* Idle */;\n      return;\n    }\n    const toIndex = this.lastToIndex;\n    const fromIndex = indexForItem(selectedItemEl);\n    if (toIndex === fromIndex) {\n      this.completeSync();\n    }\n    else {\n      this.ionItemReorder.emit({\n        from: fromIndex,\n        to: toIndex,\n        complete: this.completeSync.bind(this)\n      });\n    }\n    hapticSelectionEnd();\n  }\n  completeSync(listOrReorder) {\n    const selectedItemEl = this.selectedItemEl;\n    if (selectedItemEl && this.state === 2 /* Complete */) {\n      const children = this.el.children;\n      const len = children.length;\n      const toIndex = this.lastToIndex;\n      const fromIndex = indexForItem(selectedItemEl);\n      if (toIndex !== fromIndex && (listOrReorder === undefined || listOrReorder === true)) {\n        const ref = (fromIndex < toIndex)\n          ? children[toIndex + 1]\n          : children[toIndex];\n        this.el.insertBefore(selectedItemEl, ref);\n      }\n      if (Array.isArray(listOrReorder)) {\n        listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\n      }\n      for (let i = 0; i < len; i++) {\n        children[i].style['transform'] = '';\n      }\n      selectedItemEl.style.transition = '';\n      selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\n      this.selectedItemEl = undefined;\n      this.state = 0 /* Idle */;\n    }\n    return listOrReorder;\n  }\n  itemIndexForTop(deltaY) {\n    const heights = this.cachedHeights;\n    let i = 0;\n    // TODO: since heights is a sorted array of integers, we can do\n    // speed up the search using binary search. Remember that linear-search is still\n    // faster than binary-search for small arrays (<64) due CPU branch misprediction.\n    for (i = 0; i < heights.length; i++) {\n      if (heights[i] > deltaY) {\n        break;\n      }\n    }\n    return i;\n  }\n  /********* DOM WRITE ********* */\n  reorderMove(fromIndex, toIndex) {\n    const itemHeight = this.selectedItemHeight;\n    const children = this.el.children;\n    for (let i = 0; i < children.length; i++) {\n      const style = children[i].style;\n      let value = '';\n      if (i > fromIndex && i <= toIndex) {\n        value = `translateY(${-itemHeight}px)`;\n      }\n      else if (i < fromIndex && i >= toIndex) {\n        value = `translateY(${itemHeight}px)`;\n      }\n      style['transform'] = value;\n    }\n  }\n  autoscroll(posY) {\n    if (!this.scrollEl) {\n      return 0;\n    }\n    let amount = 0;\n    if (posY < this.scrollElTop) {\n      amount = -SCROLL_JUMP;\n    }\n    else if (posY > this.scrollElBottom) {\n      amount = SCROLL_JUMP;\n    }\n    if (amount !== 0) {\n      this.scrollEl.scrollBy(0, amount);\n    }\n    return this.scrollEl.scrollTop - this.scrollElInitial;\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'reorder-enabled': !this.disabled,\n        'reorder-list-active': this.state !== 0 /* Idle */,\n      } }));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n};\nconst indexForItem = (element) => {\n  return element['$ionIndex'];\n};\nconst findReorderItem = (node, container) => {\n  let parent;\n  while (node) {\n    parent = node.parentElement;\n    if (parent === container) {\n      return node;\n    }\n    node = parent;\n  }\n  return undefined;\n};\nconst AUTO_SCROLL_MARGIN = 60;\nconst SCROLL_JUMP = 10;\nconst ITEM_REORDER_SELECTED = 'reorder-selected';\nconst reorderArray = (array, from, to) => {\n  const element = array[from];\n  array.splice(from, 1);\n  array.splice(to, 0, element);\n  return array.slice();\n};\nReorderGroup.style = reorderGroupCss;\n\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };\n"],"sourceRoot":""}