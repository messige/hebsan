{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":["CELL_TYPE_ITEM","CELL_TYPE_HEADER","CELL_TYPE_FOOTER","NODE_CHANGE_NONE","NODE_CHANGE_POSITION","NODE_CHANGE_CELL","MIN_READS","updateVDom","dom","heightIndex","cells","range","node","change","d","toMutate","end","offset","length","i","cell","find","n","top","push","pool","filter","type","index","visible","forEach","doRender","el","nodeRender","updateCellHeight","children","Array","from","tagName","childrenNu","child","newChild","createNode","classList","add","appendChild","style","transform","remove","reads","template","getTemplate","ownerDocument","importNode","content","querySelector","getViewport","scrollTop","vierportHeight","margin","Math","max","bottom","getRange","viewport","buffer","topPos","bottomPos","min","getShouldUpdate","dirtyIndex","currentRange","findCellIndex","findIndex","c","inplaceUpdate","dst","src","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","len","item","value","height","calcHeightIndex","buf","acum","resizeBuffer","Uint32Array","newBuf","set","subarray","positionForIndex","virtualScrollCss","VirtualScroll","hostRef","this","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","contentEl","closest","scrollEl","getScrollElement","updateState","console","error","undefined","Promise","resolve","getHeightIndex","cellIndex","scheduleUpdate","checkRange","timerUpdate","clearTimeout","readVS","bind","writeVS","topOffset","offsetTop","offsetParent","offsetHeight","shouldUpdate","domRender","renderItem","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","componentOnReady","then","setTimeout","shouldEnable","enableScrollEvents","Infinity","shouldListen","rmEvent","addEventListener","removeEventListener","renderHeader","renderFooter","VirtualProxy","map","renderVirtualNode","utils","vattrs","classes","class","Object","assign"],"mappings":"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","file":"js/chunk-2d22bf33.a0b7339a.js","sourcesContent":["import { r as registerInstance, f as readTask, c as writeTask, j as forceUpdate, h, H as Host, i as getElement } from './index-e806d1f6.js';\n\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\nconst updateVDom = (dom, heightIndex, cells, range) => {\n  // reset dom\n  for (const node of dom) {\n    node.change = NODE_CHANGE_NONE;\n    node.d = true;\n  }\n  // try to match into exisiting dom\n  const toMutate = [];\n  const end = range.offset + range.length;\n  for (let i = range.offset; i < end; i++) {\n    const cell = cells[i];\n    const node = dom.find(n => n.d && n.cell === cell);\n    if (node) {\n      const top = heightIndex[i];\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n      node.d = false;\n    }\n    else {\n      toMutate.push(cell);\n    }\n  }\n  // needs to append\n  const pool = dom.filter(n => n.d);\n  for (const cell of toMutate) {\n    const node = pool.find(n => n.d && n.cell.type === cell.type);\n    const index = cell.i;\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    }\n    else {\n      dom.push({\n        d: false,\n        cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index],\n      });\n    }\n  }\n  dom\n    .filter(n => n.d && n.top !== -9999)\n    .forEach(n => {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n  const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n  const childrenNu = children.length;\n  let child;\n  for (let i = 0; i < dom.length; i++) {\n    const node = dom[i];\n    const cell = node.cell;\n    // the cell change, the content must be updated\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      }\n      else {\n        const newChild = createNode(el, cell.type);\n        child = nodeRender(newChild, cell, i) || newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n      child['$ionCell'] = cell;\n    }\n    else {\n      child = children[i];\n    }\n    // only update position when it changes\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = `translate3d(0,${node.top}px,0)`;\n    }\n    // update visibility\n    const visible = cell.visible;\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      }\n      else {\n        child.classList.add('virtual-loading');\n      }\n      node.visible = visible;\n    }\n    // dynamic height\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\nconst createNode = (el, type) => {\n  const template = getTemplate(el, type);\n  if (template && el.ownerDocument) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n  return null;\n};\nconst getTemplate = (el, type) => {\n  switch (type) {\n    case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n    case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n    case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n  }\n};\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin\n  };\n};\nconst getRange = (heightIndex, viewport, buffer) => {\n  const topPos = viewport.top;\n  const bottomPos = viewport.bottom;\n  // find top index\n  let i = 0;\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n  const offset = Math.max(i - buffer - 1, 0);\n  // find bottom index\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n  const end = Math.min(i + buffer, heightIndex.length);\n  const length = end - offset;\n  return { offset, length };\n};\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n  const end = range.offset + range.length;\n  return (dirtyIndex <= end ||\n    currentRange.offset !== range.offset ||\n    currentRange.length !== range.length);\n};\nconst findCellIndex = (cells, index) => {\n  const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n  if (index === 0) {\n    return 0;\n  }\n  else if (index === max + 1) {\n    return cells.length;\n  }\n  else {\n    return cells.findIndex(c => c.index === index);\n  }\n};\nconst inplaceUpdate = (dst, src, offset) => {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n  for (let i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n  return dst;\n};\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n  const cells = [];\n  const end = len + offset;\n  for (let i = offset; i < end; i++) {\n    const item = items[i];\n    if (headerFn) {\n      const value = headerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight,\n        });\n      }\n    }\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight,\n    });\n    if (footerFn) {\n      const value = footerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value,\n          index: i,\n          height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight,\n        });\n      }\n    }\n  }\n  return cells;\n};\nconst calcHeightIndex = (buf, cells, index) => {\n  let acum = buf[index];\n  for (let i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n  return acum;\n};\nconst resizeBuffer = (buf, len) => {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n  if (buf.length === len) {\n    return buf;\n  }\n  else if (len > buf.length) {\n    const newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  }\n  else {\n    return buf.subarray(0, len);\n  }\n};\nconst positionForIndex = (index, cells, heightIndex) => {\n  const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n  return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;transition-duration:0ms;will-change:transform}\";\n\nconst VirtualScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.range = { offset: 0, length: 0 };\n    this.viewportHeight = 0;\n    this.cells = [];\n    this.virtualDom = [];\n    this.isEnabled = false;\n    this.viewportOffset = 0;\n    this.currentScrollTop = 0;\n    this.indexDirty = 0;\n    this.lastItemLen = 0;\n    this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxFooterHeight = 30;\n    this.onScroll = () => {\n      this.updateVirtualScroll();\n    };\n  }\n  itemsChanged() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    this.scrollEl = await contentEl.getScrollElement();\n    this.contentEl = contentEl;\n    this.calcCells();\n    this.updateState();\n  }\n  componentDidUpdate() {\n    this.updateState();\n  }\n  disconnectedCallback() {\n    this.scrollEl = undefined;\n  }\n  onResize() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  /**\n   * Returns the position of the virtual item at the given index.\n   */\n  positionForItem(index) {\n    return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n  }\n  /**\n   * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n   * dirty any time the content or their style changes.\n   *\n   * The subset of items to be updated can are specifing by an offset and a length.\n   */\n  async checkRange(offset, len = -1) {\n    // TODO: kind of hacky how we do in-place updated of the cells\n    // array. this part needs a complete refactor\n    if (!this.items) {\n      return;\n    }\n    const length = (len === -1)\n      ? this.items.length - offset\n      : len;\n    const cellIndex = findCellIndex(this.cells, offset);\n    const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n    this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n    this.lastItemLen = this.items.length;\n    this.indexDirty = Math.max(offset - 1, 0);\n    this.scheduleUpdate();\n  }\n  /**\n   * This method marks the tail the items array as dirty, so they can be re-rendered.\n   *\n   * It's equivalent to calling:\n   *\n   * ```js\n   * virtualScroll.checkRange(lastItemLen);\n   * ```\n   */\n  async checkEnd() {\n    if (this.items) {\n      this.checkRange(this.lastItemLen);\n    }\n  }\n  updateVirtualScroll() {\n    // do nothing if virtual-scroll is disabled\n    if (!this.isEnabled || !this.scrollEl) {\n      return;\n    }\n    // unschedule future updates\n    if (this.timerUpdate) {\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = undefined;\n    }\n    // schedule DOM operations into the stencil queue\n    readTask(this.readVS.bind(this));\n    writeTask(this.writeVS.bind(this));\n  }\n  readVS() {\n    const { contentEl, scrollEl, el } = this;\n    let topOffset = 0;\n    let node = el;\n    while (node && node !== contentEl) {\n      topOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n    this.viewportOffset = topOffset;\n    if (scrollEl) {\n      this.viewportHeight = scrollEl.offsetHeight;\n      this.currentScrollTop = scrollEl.scrollTop;\n    }\n  }\n  writeVS() {\n    const dirtyIndex = this.indexDirty;\n    // get visible viewport\n    const scrollTop = this.currentScrollTop - this.viewportOffset;\n    const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n    // compute lazily the height index\n    const heightIndex = this.getHeightIndex();\n    // get array bounds of visible cells base in the viewport\n    const range = getRange(heightIndex, viewport, 2);\n    // fast path, do nothing\n    const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n    if (!shouldUpdate) {\n      return;\n    }\n    this.range = range;\n    // in place mutation of the virtual DOM\n    updateVDom(this.virtualDom, heightIndex, this.cells, range);\n    // Write DOM\n    // Different code paths taken depending of the render API used\n    if (this.nodeRender) {\n      doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n    }\n    else if (this.domRender) {\n      this.domRender(this.virtualDom);\n    }\n    else if (this.renderItem) {\n      forceUpdate(this);\n    }\n  }\n  updateCellHeight(cell, node) {\n    const update = () => {\n      if (node['$ionCell'] === cell) {\n        const style = window.getComputedStyle(node);\n        const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n        this.setCellHeight(cell, height);\n      }\n    };\n    if (node && node.componentOnReady) {\n      node.componentOnReady().then(update);\n    }\n    else {\n      update();\n    }\n  }\n  setCellHeight(cell, height) {\n    const index = cell.i;\n    // the cell might changed since the height update was scheduled\n    if (cell !== this.cells[index]) {\n      return;\n    }\n    if (cell.height !== height || cell.visible !== true) {\n      cell.visible = true;\n      cell.height = height;\n      this.indexDirty = Math.min(this.indexDirty, index);\n      this.scheduleUpdate();\n    }\n  }\n  scheduleUpdate() {\n    clearTimeout(this.timerUpdate);\n    this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n  }\n  updateState() {\n    const shouldEnable = !!(this.scrollEl &&\n      this.cells);\n    if (shouldEnable !== this.isEnabled) {\n      this.enableScrollEvents(shouldEnable);\n      if (shouldEnable) {\n        this.updateVirtualScroll();\n      }\n    }\n  }\n  calcCells() {\n    if (!this.items) {\n      return;\n    }\n    this.lastItemLen = this.items.length;\n    this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n    this.indexDirty = 0;\n  }\n  getHeightIndex() {\n    if (this.indexDirty !== Infinity) {\n      this.calcHeightIndex(this.indexDirty);\n    }\n    return this.heightIndex;\n  }\n  calcHeightIndex(index = 0) {\n    // TODO: optimize, we don't need to calculate all the cells\n    this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n    this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n    this.indexDirty = Infinity;\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.rmEvent) {\n      this.rmEvent();\n      this.rmEvent = undefined;\n    }\n    const scrollEl = this.scrollEl;\n    if (scrollEl) {\n      this.isEnabled = shouldListen;\n      scrollEl.addEventListener('scroll', this.onScroll);\n      this.rmEvent = () => {\n        scrollEl.removeEventListener('scroll', this.onScroll);\n      };\n    }\n  }\n  renderVirtualNode(node) {\n    const { type, value, index } = node.cell;\n    switch (type) {\n      case CELL_TYPE_ITEM: return this.renderItem(value, index);\n      case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n      case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n    }\n  }\n  render() {\n    return (h(Host, { style: {\n        height: `${this.totalHeight}px`\n      } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"itemHeight\": [\"itemsChanged\"],\n    \"headerHeight\": [\"itemsChanged\"],\n    \"footerHeight\": [\"itemsChanged\"],\n    \"items\": [\"itemsChanged\"]\n  }; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n  return utils.map(children, (child, i) => {\n    const node = dom[i];\n    const vattrs = child.vattrs || {};\n    let classes = vattrs.class || '';\n    classes += 'virtual-item ';\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n    return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n  });\n};\nVirtualScroll.style = virtualScrollCss;\n\nexport { VirtualScroll as ion_virtual_scroll };\n"],"sourceRoot":""}