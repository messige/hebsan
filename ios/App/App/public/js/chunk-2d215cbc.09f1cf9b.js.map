{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/ion-img.entry.js"],"names":["imgCss","Img","hostRef","this","ionImgWillLoad","ionImgDidLoad","ionError","onLoad","emit","onError","addIO","undefined","src","window","IntersectionObserverEntry","prototype","removeIO","io","IntersectionObserver","data","isIntersecting","load","observe","el","setTimeout","loadError","loadSrc","disconnect","class","decoding","alt","part","style"],"mappings":"gHAAA,2EAGA,MAAMA,EAAS,8HAETC,EAAM,MACV,YAAYC,GACV,eAAiBC,KAAMD,GACvBC,KAAKC,eAAiB,eAAYD,KAAM,iBAAkB,GAC1DA,KAAKE,cAAgB,eAAYF,KAAM,gBAAiB,GACxDA,KAAKG,SAAW,eAAYH,KAAM,WAAY,GAC9CA,KAAKI,OAAS,KACZJ,KAAKE,cAAcG,QAErBL,KAAKM,QAAU,KACbN,KAAKG,SAASE,QAGlB,aACEL,KAAKO,QAEP,mBACEP,KAAKO,QAEP,aACmBC,IAAbR,KAAKS,MAGa,qBAAXC,QACT,yBAA0BA,QAC1B,8BAA+BA,QAC/B,mBAAoBA,OAAOC,0BAA0BC,WACrDZ,KAAKa,WACLb,KAAKc,GAAK,IAAIC,qBAAqBC,IAI7BA,EAAK,GAAGC,iBACVjB,KAAKkB,OACLlB,KAAKa,cAGTb,KAAKc,GAAGK,QAAQnB,KAAKoB,KAIrBC,WAAW,IAAMrB,KAAKkB,OAAQ,MAGlC,OACElB,KAAKsB,UAAYtB,KAAKM,QACtBN,KAAKuB,QAAUvB,KAAKS,IACpBT,KAAKC,eAAeI,OAEtB,WACML,KAAKc,KACPd,KAAKc,GAAGU,aACRxB,KAAKc,QAAKN,GAGd,SACE,OAAQ,cAAD,CAAG,OAAM,CAAEiB,MAAO,eAAWzB,OAAS,eAAE,MAAO,CAAE0B,SAAU,QAASjB,IAAKT,KAAKuB,QAASI,IAAK3B,KAAK2B,IAAKvB,OAAQJ,KAAKI,OAAQE,QAASN,KAAKsB,UAAWM,KAAM,WAEnK,SAAW,OAAO,eAAW5B,MAC7B,sBAAwB,MAAO,CAC7B,IAAO,CAAC,iBAGZF,EAAI+B,MAAQhC","file":"js/chunk-2d215cbc.09f1cf9b.js","sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-e806d1f6.js';\nimport { b as getIonMode } from './ionic-global-9d5c8ee3.js';\n\nconst imgCss = \":host{display:block;object-fit:contain}img{display:block;width:100%;height:100%;object-fit:inherit;object-position:inherit}\";\n\nconst Img = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionImgWillLoad = createEvent(this, \"ionImgWillLoad\", 7);\n    this.ionImgDidLoad = createEvent(this, \"ionImgDidLoad\", 7);\n    this.ionError = createEvent(this, \"ionError\", 7);\n    this.onLoad = () => {\n      this.ionImgDidLoad.emit();\n    };\n    this.onError = () => {\n      this.ionError.emit();\n    };\n  }\n  srcChanged() {\n    this.addIO();\n  }\n  componentDidLoad() {\n    this.addIO();\n  }\n  addIO() {\n    if (this.src === undefined) {\n      return;\n    }\n    if (typeof window !== 'undefined' &&\n      'IntersectionObserver' in window &&\n      'IntersectionObserverEntry' in window &&\n      'isIntersecting' in window.IntersectionObserverEntry.prototype) {\n      this.removeIO();\n      this.io = new IntersectionObserver(data => {\n        // because there will only ever be one instance\n        // of the element we are observing\n        // we can just use data[0]\n        if (data[0].isIntersecting) {\n          this.load();\n          this.removeIO();\n        }\n      });\n      this.io.observe(this.el);\n    }\n    else {\n      // fall back to setTimeout for Safari and IE\n      setTimeout(() => this.load(), 200);\n    }\n  }\n  load() {\n    this.loadError = this.onError;\n    this.loadSrc = this.src;\n    this.ionImgWillLoad.emit();\n  }\n  removeIO() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  render() {\n    return (h(Host, { class: getIonMode(this) }, h(\"img\", { decoding: \"async\", src: this.loadSrc, alt: this.alt, onLoad: this.onLoad, onError: this.loadError, part: \"image\" })));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"src\": [\"srcChanged\"]\n  }; }\n};\nImg.style = imgCss;\n\nexport { Img as ion_img };\n"],"sourceRoot":""}