{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/framework-delegate-4584ab5a.js","webpack:///./node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"names":["attachComponent","async","delegate","container","component","cssClasses","componentProps","attachViewToDom","HTMLElement","Error","el","ownerDocument","createElement","forEach","c","classList","add","Object","assign","appendChild","componentOnReady","detachComponent","element","parentElement","removeViewFromDom","remove","Promise","resolve","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","params","this","state","nav","undefined","matches","view","id","currentParams","keysA","keys","keysB","length","key","convertToView","page","convertToViews","pages","map","filter","v","navCss","Nav","hostRef","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","gesture","enable","swipeGesture","root","setRoot","rootParams","document","querySelector","closest","mode","getBoolean","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","_destroy","destroy","opts","done","queueTrns","insertStart","insertViews","insertIndex","insertComponents","removeStart","removeCount","indexOrViewCtrl","tiConfig","removeView","startIndex","setPages","direction","animation","active","getActiveSync","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","popTo","animationBuilder","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","ti","skipIfBusy","reject","router","canTransition","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","transition","success","failed","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","style","navLink","routerDirection","routerAnimation","pop","NavLink","onClick"],"mappings":"kHAAA,0EAAMA,EAAkBC,MAAOC,EAAUC,EAAWC,EAAWC,EAAYC,KACzE,GAAIJ,EACF,OAAOA,EAASK,gBAAgBJ,EAAWC,EAAWE,EAAgBD,GAExE,GAAyB,kBAAdD,KAA4BA,aAAqBI,aAC1D,MAAM,IAAIC,MAAM,iCAElB,MAAMC,EAA2B,kBAAdN,EACfD,EAAUQ,eAAiBR,EAAUQ,cAAcC,cAAcR,GACjEA,EAWJ,OAVIC,GACFA,EAAWQ,QAAQC,GAAKJ,EAAGK,UAAUC,IAAIF,IAEvCR,GACFW,OAAOC,OAAOR,EAAIJ,GAEpBH,EAAUgB,YAAYT,GAClBA,EAAGU,wBACCV,EAAGU,mBAEJV,GAEHW,EAAkB,CAACnB,EAAUoB,KACjC,GAAIA,EAAS,CACX,GAAIpB,EAAU,CACZ,MAAMC,EAAYmB,EAAQC,cAC1B,OAAOrB,EAASsB,kBAAkBrB,EAAWmB,GAE/CA,EAAQG,SAEV,OAAOC,QAAQC,Y,kCC9BjB,wKAOA,MAAMC,EAAiB,EACjBC,EAAsB,EACtBC,EAAuB,EAC7B,MAAMC,EACJ,YAAY3B,EAAW4B,GACrBC,KAAK7B,UAAYA,EACjB6B,KAAKD,OAASA,EACdC,KAAKC,MAAQN,EAEf,WAAWzB,GAET,GADA8B,KAAKC,MAAQL,GACRI,KAAKX,QAAS,CACjB,MAAMlB,EAAY6B,KAAK7B,UACvB6B,KAAKX,cAAgB,eAAgBW,KAAK/B,SAAUC,EAAWC,EAAW,CAAC,WAAY,sBAAuB6B,KAAKD,SAMvH,WACE,eAAOC,KAAKC,QAAUJ,EAAsB,+BAC5C,MAAMR,EAAUW,KAAKX,QACjBA,IACEW,KAAK/B,SACP+B,KAAK/B,SAASsB,kBAAkBF,EAAQC,cAAeD,GAGvDA,EAAQG,UAGZQ,KAAKE,SAAMC,EACXH,KAAKC,MAAQJ,GAGjB,MAAMO,EAAU,CAACC,EAAMC,EAAIP,KACzB,IAAKM,EACH,OAAO,EAET,GAAIA,EAAKlC,YAAcmC,EACrB,OAAO,EAET,MAAMC,EAAgBF,EAAKN,OAC3B,GAAIQ,IAAkBR,EACpB,OAAO,EAET,IAAKQ,IAAkBR,EACrB,OAAO,EAET,IAAKQ,IAAkBR,EACrB,OAAO,EAET,MAAMS,EAAQxB,OAAOyB,KAAKF,GACpBG,EAAQ1B,OAAOyB,KAAKV,GAC1B,GAAIS,EAAMG,SAAWD,EAAMC,OACzB,OAAO,EAGT,IAAK,MAAMC,KAAOJ,EAChB,GAAID,EAAcK,KAASb,EAAOa,GAChC,OAAO,EAGX,OAAO,GAEHC,EAAgB,CAACC,EAAMf,IACtBe,EAGDA,aAAgBhB,EACXgB,EAEF,IAAIhB,EAAegB,EAAMf,GALvB,KAOLgB,EAAkBC,GACfA,EAAMC,IAAIH,GACXA,aAAgBhB,EACXgB,EAEL,cAAeA,EAQVD,EAAcC,EAAK3C,UAAoC,OAAxB2C,EAAKzC,oBAA2B8B,EAAYW,EAAKzC,gBAElFwC,EAAcC,OAAMX,IAC1Be,OAAOC,GAAW,OAANA,GAGXC,EAAS,6GAETC,EAAM,MACV,YAAYC,GACV,eAAiBtB,KAAMsB,GACvBtB,KAAKuB,eAAiB,eAAYvB,KAAM,iBAAkB,GAC1DA,KAAKwB,iBAAmB,eAAYxB,KAAM,mBAAoB,GAC9DA,KAAKyB,gBAAkB,eAAYzB,KAAM,kBAAmB,GAC5DA,KAAK0B,WAAa,GAClB1B,KAAK2B,kBAAmB,EACxB3B,KAAK4B,WAAY,EACjB5B,KAAK6B,iBAAkB,EACvB7B,KAAK8B,WAAY,EACjB9B,KAAK+B,MAAQ,GAIb/B,KAAKgC,UAAW,EAElB,sBACMhC,KAAKiC,SACPjC,KAAKiC,QAAQC,QAA6B,IAAtBlC,KAAKmC,cAG7B,mBACoBhC,IAAdH,KAAKoC,OACFpC,KAAK4B,WACR5B,KAAKqC,QAAQrC,KAAKoC,KAAMpC,KAAKsC,aAInC,oBAIE,GAHAtC,KAAK4B,YACDW,SAASC,cAAc,gBACtBxC,KAAKvB,GAAGgE,QAAQ,oBACKtC,IAAtBH,KAAKmC,aAA4B,CACnC,MAAMO,EAAO,eAAW1C,MACxBA,KAAKmC,aAAe,OAAOQ,WAAW,mBAA6B,QAATD,GAE5D1C,KAAKuB,eAAeqB,OAEtB,yBACE5C,KAAK6C,cACL7C,KAAKiC,eAAiB,iDAAoCa,uBAAuB9C,KAAKvB,GAAIuB,KAAK+C,SAASC,KAAKhD,MAAOA,KAAKiD,QAAQD,KAAKhD,MAAOA,KAAKkD,OAAOF,KAAKhD,MAAOA,KAAKmD,MAAMH,KAAKhD,OACrLA,KAAKoD,sBAEP,uBACE,IAAK,MAAM/C,KAAQL,KAAK+B,MACtB,eAAU1B,EAAKhB,QAAS,QACxBgB,EAAKgD,WAEHrD,KAAKiC,UACPjC,KAAKiC,QAAQqB,UACbtD,KAAKiC,aAAU9B,GAGjBH,KAAK0B,WAAWf,OAASX,KAAK+B,MAAMpB,OAAS,EAC7CX,KAAK8B,WAAY,EAYnB,KAAK3D,EAAWE,EAAgBkF,EAAMC,GACpC,OAAOxD,KAAKyD,UAAU,CACpBC,aAAc,EACdC,YAAa,CAAC,CAAExF,YAAWE,mBAC3BkF,QACCC,GAYL,OAAOI,EAAazF,EAAWE,EAAgBkF,EAAMC,GACnD,OAAOxD,KAAKyD,UAAU,CACpBC,YAAaE,EACbD,YAAa,CAAC,CAAExF,YAAWE,mBAC3BkF,QACCC,GAYL,YAAYI,EAAaC,EAAkBN,EAAMC,GAC/C,OAAOxD,KAAKyD,UAAU,CACpBC,YAAaE,EACbD,YAAaE,EACbN,QACCC,GASL,IAAID,EAAMC,GACR,OAAOxD,KAAKyD,UAAU,CACpBK,aAAc,EACdC,YAAa,EACbR,QACCC,GASL,MAAMQ,EAAiBT,EAAMC,GAC3B,MAAMS,EAAW,CACfH,aAAc,EACdC,aAAc,EACdR,QASF,MAP+B,kBAApBS,GAAgCA,EAAgB7F,WACzD8F,EAASC,WAAaF,EACtBC,EAASH,YAAc,GAEW,kBAApBE,IACdC,EAASH,YAAcE,EAAkB,GAEpChE,KAAKyD,UAAUQ,EAAUT,GAQlC,UAAUD,EAAMC,GACd,OAAOxD,KAAKyD,UAAU,CACpBK,YAAa,EACbC,aAAc,EACdR,QACCC,GAUL,YAAYW,EAAYJ,EAAc,EAAGR,EAAMC,GAC7C,OAAOxD,KAAKyD,UAAU,CACpBK,YAAaK,EACbJ,cACAR,QACCC,GAUL,QAAQrF,EAAWE,EAAgBkF,EAAMC,GACvC,OAAOxD,KAAKoE,SAAS,CAAC,CAAEjG,YAAWE,mBAAmBkF,EAAMC,GAY9D,SAASzB,EAAOwB,EAAMC,GAQpB,OAPY,MAARD,IACFA,EAAO,KAGa,IAAlBA,EAAKvB,WACPuB,EAAKvB,UAAW,GAEXhC,KAAKyD,UAAU,CACpBC,YAAa,EACbC,YAAa5B,EACb+B,YAAa,EACbC,aAAc,EACdR,QACCC,GAGL,WAAWlD,EAAIP,EAAQsE,EAAWC,GAChC,MAAMC,EAASvE,KAAKwE,gBACpB,GAAIpE,EAAQmE,EAAQjE,EAAIP,GACtB,OAAON,QAAQC,QAAQ,CACrB+E,SAAS,EACTpF,QAASkF,EAAOlF,UAGpB,IAAIK,EACJ,MAAMgF,EAAU,IAAIjF,QAAQkF,GAAMjF,EAAUiF,GAC5C,IAAIC,EACJ,MAAMC,EAAa,CACjBC,WAAW,EACXC,YAAaC,IACX,IAAIC,EACJ,MAAMC,EAAI,IAAIzF,QAAQkF,GAAMM,EAAON,GASnC,OARAjF,EAAQ,CACN+E,SAAS,EACTpF,QAAS2F,EACTG,YAAanH,UACXiH,UACML,KAGHM,IAGX,GAAkB,SAAdb,EACFO,EAAS5E,KAAKqC,QAAQ/B,EAAIP,EAAQ8E,OAE/B,CACH,MAAMO,EAAiBpF,KAAK+B,MAAMsD,KAAKlE,GAAKf,EAAQe,EAAGb,EAAIP,IACvDqF,EACFR,EAAS5E,KAAKsF,MAAMF,EAAgBpG,OAAOC,OAAOD,OAAOC,OAAO,GAAI4F,GAAa,CAAER,UAAW,OAAQkB,iBAAkBjB,KAEnG,YAAdD,EACPO,EAAS5E,KAAKwF,KAAKlF,EAAIP,EAAQf,OAAOC,OAAOD,OAAOC,OAAO,GAAI4F,GAAa,CAAEU,iBAAkBjB,KAE3E,SAAdD,IACPO,EAAS5E,KAAKqC,QAAQ/B,EAAIP,EAAQf,OAAOC,OAAOD,OAAOC,OAAO,GAAI4F,GAAa,CAAER,UAAW,OAAQrC,UAAU,EAAMuD,iBAAkBjB,MAG1I,OAAOI,EAGT,mBACE,MAAMH,EAASvE,KAAKwE,gBACpB,OAAOD,EACH,CACAjE,GAAIiE,EAAOlF,QAAQoG,QACnB1F,OAAQwE,EAAOxE,OACfV,QAASkF,EAAOlF,cAEhBc,EAKN,YACE,OAAOV,QAAQC,QAAQM,KAAKwE,iBAO9B,WAAWkB,GACT,OAAOjG,QAAQC,QAAQM,KAAK+B,MAAM2D,IAOpC,UAAUrF,GACR,OAAOZ,QAAQC,QAAQM,KAAK2F,cAActF,IAO5C,YAAYA,GACV,OAAOZ,QAAQC,QAAQM,KAAK4F,gBAAgBvF,IAE9C,YACE,OAAOL,KAAK+B,MAAMpB,OAEpB,gBACE,OAAOX,KAAK+B,MAAM/B,KAAK+B,MAAMpB,OAAS,GAExC,cAAcN,EAAOL,KAAKwE,iBACxB,SAAUnE,IAAQL,KAAK4F,gBAAgBvF,IAEzC,gBAAgBA,EAAOL,KAAKwE,iBAC1B,IAAKnE,EACH,OAEF,MAAM0B,EAAQ/B,KAAK+B,MACb2D,EAAQ3D,EAAM8D,QAAQxF,GAC5B,OAAOqF,EAAQ,EAAI3D,EAAM2D,EAAQ,QAAKvF,EAYxC,gBAAgB2F,EAAItC,GAClB,GAAIxD,KAAK6B,iBAA8B,MAAXiE,EAAGvC,MAAgBuC,EAAGvC,KAAKwC,WACrD,OAAOtG,QAAQC,SAAQ,GAEzB,MAAMgF,EAAU,IAAIjF,QAAQ,CAACC,EAASsG,KACpCF,EAAGpG,QAAUA,EACboG,EAAGE,OAASA,IASd,GAPAF,EAAGtC,KAAOA,EAONsC,EAAGvC,OAA8B,IAAtBuC,EAAGvC,KAAKuB,WAAuB9E,KAAK4B,UAAW,CAC5D,MAAMqE,EAAS1D,SAASC,cAAc,cACtC,GAAIyD,EAAQ,CACV,MAAMC,QAAsBD,EAAOC,gBACnC,IAAsB,IAAlBA,EACF,OAAOzG,QAAQC,SAAQ,GAEpB,GAA6B,kBAAlBwG,EAEd,OADAD,EAAOT,KAAKU,EAAeJ,EAAGvC,KAAKc,WAAa,QACzC5E,QAAQC,SAAQ,IAa7B,OARIoG,EAAGnC,aAAyC,IAA1BmC,EAAGnC,YAAYhD,SACnCmF,EAAGnC,iBAAcxD,GAGnBH,KAAK0B,WAAW8D,KAAKM,GAGrB9F,KAAKmG,WACEzB,EAET,QAAQ0B,EAAQN,GACd,GAAI9F,KAAK8B,UACP9B,KAAKqG,UAAU,+BAAgCP,QAOjD,GAJIA,EAAGtC,MACLsC,EAAGtC,KAAK4C,EAAOE,aAAcF,EAAOG,mBAAoBH,EAAOI,aAAcJ,EAAOK,YAAaL,EAAO/B,WAE1GyB,EAAGpG,QAAQ0G,EAAOE,eACQ,IAAtBR,EAAGvC,KAAKuB,WAAuB9E,KAAK4B,UAAW,CACjD,MAAMqE,EAAS1D,SAASC,cAAc,cACtC,GAAIyD,EAAQ,CACV,MAAM5B,EAAiC,SAArB+B,EAAO/B,UAAuB,OAAS,UACzD4B,EAAOS,WAAWrC,KAIxB,OAAOsC,EAAcb,GACf9F,KAAK8B,UACP9B,KAAKqG,UAAU,+BAAgCP,IAGjD9F,KAAK0B,WAAWf,OAAS,EACzBX,KAAKqG,UAAUM,EAAcb,IAE/B,UAAUa,EAAcb,GAClBA,EAAGtC,MACLsC,EAAGtC,MAAK,GAAO,EAAOmD,GAEpBb,EAAGE,SAAWhG,KAAK8B,UACrBgE,EAAGE,OAAOW,GAGVb,EAAGpG,SAAQ,GAGf,WAGE,GAAIM,KAAK6B,gBACP,OAAO,EAIT,MAAMiE,EAAK9F,KAAK0B,WAAWkF,QAC3B,QAAKd,IAGL9F,KAAK6G,cAAcf,IACZ,GAET,oBAAoBA,GAClB,IAEE9F,KAAKwB,iBAAiBoB,OACtB5C,KAAK6B,iBAAkB,EACvB7B,KAAK8G,UAAUhB,GACf,MAAMW,EAAczG,KAAKwE,gBACnBgC,EAAexG,KAAK+G,gBAAgBjB,EAAIW,GAC9C,IAAKA,IAAgBD,EACnB,MAAM,IAAIhI,MAAM,uCAEdgI,GAAgBA,EAAavG,QAAUN,SACnC6G,EAAaQ,KAAKhH,KAAKvB,IAE/BuB,KAAKiH,aAAaT,EAAcC,EAAaX,GAE7C,MAAMS,GAAsBT,EAAGoB,4BAA8BpB,EAAGqB,4BAC9DX,IAAiBC,EACnB,GAAIF,GAAsBT,EAAGvC,MAAQkD,EAAa,CAChD,MAAMW,EAAwC,SAAtBtB,EAAGvC,KAAKc,UAK5B+C,IACFtB,EAAGvC,KAAKgC,iBAAmBO,EAAGvC,KAAKgC,kBAAqBiB,GAAgBA,EAAajB,kBAEvFkB,EAAYlB,iBAAmBO,EAAGvC,KAAKgC,iBAEzC,MAAMa,EAASG,QACLvG,KAAKqH,WAAWb,EAAcC,EAAaX,GACjD,CAKAQ,cAAc,EACdC,oBAAoB,GAExBvG,KAAKsH,QAAQlB,EAAQN,GACrB9F,KAAKyB,gBAAgBmB,OAEvB,MAAO+D,GACL3G,KAAKuH,OAAOZ,EAAcb,GAE5B9F,KAAK6B,iBAAkB,EACvB7B,KAAKmG,WAEP,UAAUL,GACR,MAAM0B,EAAcxH,KAAK+B,MAAMpB,OAK/B,GAJAmF,EAAGvC,KAAOuC,EAAGvC,MAAQ,QACIpD,IAArB2F,EAAGvC,KAAKtF,WACV6H,EAAGvC,KAAKtF,SAAW+B,KAAK/B,eAEJkC,IAAlB2F,EAAG5B,WAA0B,CAC/B,oBAA0B/D,IAAnB2F,EAAGhC,YAA2B,gCACrC,oBAA0B3D,IAAnB2F,EAAG/B,YAA2B,gCACrC,MAAM2B,EAAQ1F,KAAK+B,MAAM8D,QAAQC,EAAG5B,YACpC,GAAIwB,EAAQ,EACV,MAAM,IAAIlH,MAAM,4BAElBsH,EAAGhC,aAAe4B,OAEGvF,IAAnB2F,EAAGhC,cACDgC,EAAGhC,YAAc,IACnBgC,EAAGhC,YAAc0D,EAAc,GAE7B1B,EAAG/B,YAAc,IACnB+B,EAAG/B,YAAcyD,EAAc1B,EAAGhC,aAEpCgC,EAAGqB,0BACDrB,EAAG/B,YAAc,GAAK+B,EAAGhC,YAAcgC,EAAG/B,cAAgByD,GAE1D1B,EAAGnC,eAGDmC,EAAGpC,YAAc,GAAKoC,EAAGpC,YAAc8D,KACzC1B,EAAGpC,YAAc8D,GAEnB1B,EAAGoB,2BAA6BpB,EAAGpC,cAAgB8D,GAErD,MAAM7D,EAAcmC,EAAGnC,YACvB,IAAKA,EACH,OAEF,eAAOA,EAAYhD,OAAS,EAAG,0BAC/B,MAAM8G,EAAkB1G,EAAe4C,GACvC,GAA+B,IAA3B8D,EAAgB9G,OAClB,MAAM,IAAInC,MAAM,2BAGlB,IAAK,MAAM6B,KAAQoH,EAAiB,CAClCpH,EAAKpC,SAAW6H,EAAGvC,KAAKtF,SACxB,MAAMiC,EAAMG,EAAKH,IACjB,GAAIA,GAAOA,IAAQF,KACjB,MAAM,IAAIxB,MAAM,sCAElB,GAAI6B,EAAKJ,QAAUJ,EACjB,MAAM,IAAIrB,MAAM,uCAGpBsH,EAAGnC,YAAc8D,EAEnB,gBAAgB3B,EAAIW,GAClB,MAAM9C,EAAcmC,EAAGnC,YACvB,QAAoBxD,IAAhBwD,EAGF,OAAOA,EAAYA,EAAYhD,OAAS,GAE1C,MAAMmD,EAAcgC,EAAGhC,YACvB,QAAoB3D,IAAhB2D,EAA2B,CAC7B,MAAM/B,EAAQ/B,KAAK+B,MACb2F,EAAY5D,EAAcgC,EAAG/B,YACnC,IAAK,IAAI4D,EAAI5F,EAAMpB,OAAS,EAAGgH,GAAK,EAAGA,IAAK,CAC1C,MAAMtH,EAAO0B,EAAM4F,GACnB,IAAKA,EAAI7D,GAAe6D,GAAKD,IAAcrH,IAASoG,EAClD,OAAOpG,IAMf,aAAamG,EAAcC,EAAaX,GACtC,eAAOW,GAAeD,EAAc,8CACpC,eAAOV,EAAGpG,QAAS,yBACnB,eAAOoG,EAAGE,OAAQ,wBAClB,MAAMzC,EAAOuC,EAAGvC,KACVI,EAAcmC,EAAGnC,YACjBG,EAAcgC,EAAGhC,YACjBC,EAAc+B,EAAG/B,YACvB,IAAI6D,EAEJ,QAAoBzH,IAAhB2D,QAA6C3D,IAAhB4D,EAA2B,CAC1D,eAAOD,GAAe,EAAG,mCACzB,eAAOC,GAAe,EAAG,mCACzB6D,EAAe,GACf,IAAK,IAAID,EAAI,EAAGA,EAAI5D,EAAa4D,IAAK,CACpC,MAAMtH,EAAOL,KAAK+B,MAAM4F,EAAI7D,GACxBzD,GAAQA,IAASmG,GAAgBnG,IAASoG,GAC5CmB,EAAapC,KAAKnF,GAItBkD,EAAKc,UAAYd,EAAKc,WAAa,OAErC,MAAMwD,EAAe7H,KAAK+B,MAAMpB,aACbR,IAAhBwD,EAA4BA,EAAYhD,OAAS,SACjCR,IAAhB4D,EAA4BA,EAAc,GAE7C,GADA,eAAO8D,GAAgB,EAAG,qCACL,IAAjBA,EAEF,MADAC,QAAQC,KAAK,uGAAwG/H,KAAMA,KAAKvB,IAC1H,IAAID,MAAM,iDAIlB,GAAImF,EAAa,CAEf,IAAIC,EAAckC,EAAGpC,YACrB,IAAK,MAAMrD,KAAQsD,EACjB3D,KAAKgI,aAAa3H,EAAMuD,GACxBA,IAEEkC,EAAGoB,6BAEL3D,EAAKc,UAAYd,EAAKc,WAAa,WAQvC,GAAIuD,GAAgBA,EAAajH,OAAS,EAAG,CAC3C,IAAK,MAAMN,KAAQuH,EACjB,eAAUvH,EAAKhB,QAAS,QACxB,eAAUgB,EAAKhB,QAAS,QACxB,eAAUgB,EAAKhB,QAAS,QAG1B,IAAK,MAAMgB,KAAQuH,EACjB5H,KAAKiI,YAAY5H,IAIvB,iBAAiBmG,EAAcC,EAAaX,GAG1C,MAAMvC,EAAOuC,EAAGvC,KACV2E,EAAmB3E,EAAK4E,kBACzBC,GAAQpI,KAAKqI,MAAQD,OACtBjI,EACEuC,EAAO,eAAW1C,MAClBgF,EAAawB,EAAanH,QAC1BiJ,EAAY7B,GAAeA,EAAYpH,QACvCkJ,EAAgBvJ,OAAOC,OAAO,CAAEyD,OAAM8F,WAAYxI,KAAK2F,cAAca,GAAeiC,OAAQzI,KAAKvB,GAAI8G,iBAAkBvF,KAAKsE,WAAaf,EAAKgC,kBAAoB,OAAOmD,IAAI,gBAAiBR,mBAAkBlG,SAAUhC,KAAKgC,UAAY,OAAOW,WAAW,YAAY,GAAOqC,aACpRsD,aAAa/E,IACT,aAAE+C,SAAuB,eAAWiC,GAC1C,OAAOvI,KAAK2I,iBAAiBrC,EAAcE,EAAcC,EAAalD,GAExE,iBAAiB+C,EAAcE,EAAcC,EAAalD,GACxD,MAAMqF,EAActC,EAAeE,EAAeC,EAIlD,OAHImC,GACF5I,KAAK6I,QAAQD,GAER,CACLtC,eACAC,oBAAoB,EACpBC,eACAC,cACApC,UAAWd,EAAKc,WAGpB,aAAahE,EAAMqF,GACjB,MAAM3D,EAAQ/B,KAAK+B,MACb+G,EAAgB/G,EAAM8D,QAAQxF,GAChCyI,GAAiB,GAGnB,eAAOzI,EAAKH,MAAQF,KAAM,+BAC1B+B,EAAMgH,OAAOrD,EAAO,EAAG3D,EAAMgH,OAAOD,EAAe,GAAG,MAGtD,gBAAQzI,EAAKH,IAAK,eAGlBG,EAAKH,IAAMF,KAEX+B,EAAMgH,OAAOrD,EAAO,EAAGrF,IAG3B,WAAWA,GACT,eAAOA,EAAKJ,QAAUL,GAAuBS,EAAKJ,QAAUJ,EAAsB,4CAClF,MAAMkC,EAAQ/B,KAAK+B,MACb2D,EAAQ3D,EAAM8D,QAAQxF,GAC5B,eAAOqF,GAAS,EAAG,kCACfA,GAAS,GACX3D,EAAMgH,OAAOrD,EAAO,GAGxB,YAAYrF,GACVA,EAAKgD,WACLrD,KAAKkE,WAAW7D,GAKlB,QAAQ2I,GAIN,GAAIhJ,KAAK8B,UACP,OAEF,MAAMC,EAAQ/B,KAAK+B,MACbkH,EAAkBlH,EAAM8D,QAAQmD,GACtC,IAAK,IAAIrB,EAAI5F,EAAMpB,OAAS,EAAGgH,GAAK,EAAGA,IAAK,CAC1C,MAAMtH,EAAO0B,EAAM4F,GASbtI,EAAUgB,EAAKhB,QACjBA,IACEsI,EAAIsB,GAGN,eAAU5J,EAAS,QACnBW,KAAKiI,YAAY5H,IAEVsH,EAAIsB,GAGX,eAAc5J,GAAS,KAK/B,WACE,QAAUW,KAAKmC,eACZnC,KAAK6B,iBACqB,IAA3B7B,KAAK0B,WAAWf,QAChBX,KAAK2B,kBACL3B,KAAK2F,gBAET,UACE3F,KAAKyD,UAAU,CACbK,aAAc,EACdC,YAAa,EACbR,KAAM,CACJc,UAAW,OACX8D,mBAAmB,SAEpBhI,GAEL,OAAO+I,GACDlJ,KAAKqI,OACPrI,KAAKqI,MAAMc,aAAaD,GAG5B,MAAME,EAAgBF,EAAWG,GAC/B,GAAIrJ,KAAKqI,MAAO,CACdrI,KAAK2B,kBAAmB,EACxB3B,KAAKqI,MAAMiB,SAAS,KAClBtJ,KAAK2B,kBAAmB,GACvB,CAAE4H,iBAAiB,IAEtB,IAAIC,EAAe,GAAoB,KAAQ,KAS1CJ,EAKHI,GAAgB,eAAwB,CAAC,EAAG,GAAI,CAAC,IAAM,KAAO,CAAC,EAAG,GAAI,CAAC,EAAG,GAAIN,GAAW,IAJzFlJ,KAAKqI,MAAMoB,OAAO,kCAClBD,GAAgB,eAAwB,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,IAAM,KAAO,CAAC,EAAG,GAAIN,GAAW,IAK3FlJ,KAAKqI,MAAMqB,YAAYN,EAAiB,EAAI,EAAGI,EAAcH,IAGjE,SACE,OAAQ,cAAD,CAAG,OAAQ,MAEpB,SAAW,OAAO,eAAWrJ,MAC7B,sBAAwB,MAAO,CAC7B,aAAgB,CAAC,uBACjB,KAAQ,CAAC,kBAGbqB,EAAIsI,MAAQvI,EAEZ,MAAMwI,EAAU,CAACnL,EAAIoL,EAAiB1L,EAAWE,EAAgByL,KAC/D,MAAM5J,EAAMzB,EAAGgE,QAAQ,WACvB,GAAIvC,EACF,GAAwB,YAApB2J,GACF,QAAkB1J,IAAdhC,EACF,OAAO+B,EAAIsF,KAAKrH,EAAWE,EAAgB,CAAE0H,YAAY,EAAMR,iBAAkBuE,SAGhF,GAAwB,SAApBD,GACP,QAAkB1J,IAAdhC,EACF,OAAO+B,EAAImC,QAAQlE,EAAWE,EAAgB,CAAE0H,YAAY,EAAMR,iBAAkBuE,SAGnF,GAAwB,SAApBD,EACP,OAAO3J,EAAI6J,IAAI,CAAEhE,YAAY,EAAMR,iBAAkBuE,IAGzD,OAAOrK,QAAQC,SAAQ,IAGnBsK,EAAU,MACd,YAAY1I,GACV,eAAiBtB,KAAMsB,GAIvBtB,KAAK6J,gBAAkB,UACvB7J,KAAKiK,QAAU,IACNL,EAAQ5J,KAAKvB,GAAIuB,KAAK6J,gBAAiB7J,KAAK7B,UAAW6B,KAAK3B,eAAgB2B,KAAK8J,iBAG5F,SACE,OAAQ,cAAD,CAAG,OAAM,CAAEG,QAASjK,KAAKiK,UAElC,SAAW,OAAO,eAAWjK","file":"js/chunk-5d875e1a.23aaf5f3.js","sourcesContent":["const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n  if (delegate) {\n    return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n  }\n  if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n    throw new Error('framework delegate is missing');\n  }\n  const el = (typeof component === 'string')\n    ? container.ownerDocument && container.ownerDocument.createElement(component)\n    : component;\n  if (cssClasses) {\n    cssClasses.forEach(c => el.classList.add(c));\n  }\n  if (componentProps) {\n    Object.assign(el, componentProps);\n  }\n  container.appendChild(el);\n  if (el.componentOnReady) {\n    await el.componentOnReady();\n  }\n  return el;\n};\nconst detachComponent = (delegate, element) => {\n  if (element) {\n    if (delegate) {\n      const container = element.parentElement;\n      return delegate.removeViewFromDom(container, element);\n    }\n    element.remove();\n  }\n  return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","import { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-e806d1f6.js';\nimport { b as getIonMode, c as config } from './ionic-global-9d5c8ee3.js';\nimport { i as assert } from './helpers-002e4980.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-35146240.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-eea9a7a9.js';\nimport { a as attachComponent } from './framework-delegate-4584ab5a.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  const currentParams = view.params;\n  if (currentParams === params) {\n    return true;\n  }\n  if (!currentParams && !params) {\n    return true;\n  }\n  if (!currentParams || !params) {\n    return false;\n  }\n  const keysA = Object.keys(currentParams);\n  const keysB = Object.keys(params);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  // Test for A's keys different from B.\n  for (const key of keysA) {\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, (page.componentProps === null) ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter =\n      !!document.querySelector('ion-router') &&\n        !this.el.closest('[no-router]');\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back-53c5a7dd.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    // release swipe back gesture and transition\n    this.transInstr.length = this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: -1,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: [{ component, componentProps }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts\n    }, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const tiConfig = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      tiConfig.removeView = indexOrViewCtrl;\n      tiConfig.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      tiConfig.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(tiConfig, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.queueTrns({\n      removeStart: 1,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    if (opts == null) {\n      opts = {};\n    }\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /** @internal */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /** @internal */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    return active\n      ? {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      }\n      : undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  getActive() {\n    return Promise.resolve(this.getActiveSync());\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  getByIndex(index) {\n    return Promise.resolve(this.views[index]);\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  canGoBack(view) {\n    return Promise.resolve(this.canGoBackSync(view));\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  getPrevious(view) {\n    return Promise.resolve(this.getPreviousSync(view));\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n  // 1. _nextTrns(): consumes the next transition in the queue\n  // 2. _viewInit(): initializes enteringView if required\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n  // 4. _postViewInit(): add/remove the views from the navigation stack\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n  // 8. _transitionFinish(): called once the transition finishes\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n  async queueTrns(ti, done) {\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n      return Promise.resolve(false);\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return Promise.resolve(false);\n        }\n        else if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return Promise.resolve(false);\n        }\n      }\n    }\n    // Normalize empty\n    if (ti.insertViews && ti.insertViews.length === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now\n    // get the next instruction\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n        enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      const result = requiresTransition\n        ? await this.transition(enteringView, leavingView, ti)\n        : {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          hasCompleted: true,\n          requiresTransition: false\n        };\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    const viewsLength = this.views.length;\n    ti.opts = ti.opts || {};\n    if (ti.opts.delegate === undefined) {\n      ti.opts.delegate = this.delegate;\n    }\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition =\n        ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  getEnteringView(ti, leavingView) {\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      // grab the very last view of the views to be inserted\n      // and initialize it as the new entering view\n      return insertViews[insertViews.length - 1];\n    }\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  postViewInit(enteringView, leavingView, ti) {\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    const opts = ti.opts;\n    const insertViews = ti.insertViews;\n    const removeStart = ti.removeStart;\n    const removeCount = ti.removeCount;\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = 0; i < removeCount; i++) {\n        const view = this.views[i + removeStart];\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      opts.direction = opts.direction || 'back';\n    }\n    const finalBalance = this.views.length +\n      (insertViews !== undefined ? insertViews.length : 0) -\n      (removeCount !== undefined ? removeCount : 0);\n    assert(finalBalance >= 0, 'final balance can not be negative');\n    if (finalBalance === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // there are views to insert\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        opts.direction = opts.direction || 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation\n      ? (ani) => this.sbAni = ani\n      : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts);\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      // this view is already in the stack!!\n      // move it to its new location\n      assert(view.nav === this, 'view is not part of the nav');\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      // insert the entering view into the correct index in the stack\n      views.splice(index, 0, view);\n    }\n  }\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: {\n        direction: 'back',\n        progressAnimation: true\n      }\n    }, undefined);\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return (h(\"slot\", null));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n      }\n    }\n    else if (routerDirection === 'back') {\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n    }\n  }\n  return Promise.resolve(false);\n};\n\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return (h(Host, { onClick: this.onClick }));\n  }\n  get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"],"sourceRoot":""}