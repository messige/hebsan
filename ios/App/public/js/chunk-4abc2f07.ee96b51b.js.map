{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/ion-avatar_3.entry.js","webpack:///./node_modules/@ionic/core/dist/esm/theme-ff3fc52f.js"],"names":["avatarIosCss","avatarMdCss","Avatar","hostRef","this","class","style","ios","md","badgeIosCss","badgeMdCss","Badge","mode","color","thumbnailCss","Thumbnail","hostContext","selector","el","closest","createColorClasses","cssClassMap","length","Object","assign","getClassList","classes","undefined","array","Array","isArray","split","filter","c","map","trim","getClassMap","forEach","SCHEME","openURL","async","url","ev","direction","animation","test","router","document","querySelector","preventDefault","push"],"mappings":"kHAAA,kLAIA,MAAMA,EAAe,wOAEfC,EAAc,wOAEdC,EAAS,MACb,YAAYC,GACV,eAAiBC,KAAMD,GAEzB,SACE,OAAQ,cAAD,CAAG,OAAM,CAAEE,MAAO,eAAWD,OAAS,eAAE,OAAQ,SAG3DF,EAAOI,MAAQ,CACbC,IAAKP,EACLQ,GAAIP,GAGN,MAAMQ,EAAc,mhCAEdC,EAAa,+lCAEbC,EAAQ,MACZ,YAAYR,GACV,eAAiBC,KAAMD,GAEzB,SACE,MAAMS,EAAO,eAAWR,MACxB,OAAQ,cAAD,CAAG,OAAM,CAAEC,MAAO,eAAmBD,KAAKS,MAAO,CACpD,CAACD,IAAO,KACJ,eAAE,OAAQ,SAGtBD,EAAML,MAAQ,CACZC,IAAKE,EACLD,GAAIE,GAGN,MAAMI,EAAe,0PAEfC,EAAY,MAChB,YAAYZ,GACV,eAAiBC,KAAMD,GAEzB,SACE,OAAQ,cAAD,CAAG,OAAM,CAAEE,MAAO,eAAWD,OAAS,eAAE,OAAQ,SAG3DW,EAAUT,MAAQQ,G,kCCnDlB,8IAAME,EAAc,CAACC,EAAUC,IACG,OAAzBA,EAAGC,QAAQF,GAKdG,EAAqB,CAACP,EAAOQ,IACR,kBAAVR,GAAsBA,EAAMS,OAAS,EAAKC,OAAOC,OAAO,CAAE,aAAa,EAAM,CAAC,aAAaX,IAAU,GAAQQ,GAAeA,EAEvII,EAAgBC,IACpB,QAAgBC,IAAZD,EAAuB,CACzB,MAAME,EAAQC,MAAMC,QAAQJ,GAAWA,EAAUA,EAAQK,MAAM,KAC/D,OAAOH,EACJI,OAAOC,GAAU,MAALA,GACZC,IAAID,GAAKA,EAAEE,QACXH,OAAOC,GAAW,KAANA,GAEjB,MAAO,IAEHG,EAAeV,IACnB,MAAMQ,EAAM,GAEZ,OADAT,EAAaC,GAASW,QAAQJ,GAAKC,EAAID,IAAK,GACrCC,GAEHI,EAAS,uBACTC,EAAUC,MAAOC,EAAKC,EAAIC,EAAWC,KACzC,GAAW,MAAPH,GAA0B,MAAXA,EAAI,KAAeH,EAAOO,KAAKJ,GAAM,CACtD,MAAMK,EAASC,SAASC,cAAc,cACtC,GAAIF,EAIF,OAHU,MAANJ,GACFA,EAAGO,iBAEEH,EAAOI,KAAKT,EAAKE,EAAWC,GAGvC,OAAO","file":"js/chunk-4abc2f07.ee96b51b.js","sourcesContent":["import { r as registerInstance, h, H as Host } from './index-e806d1f6.js';\nimport { b as getIonMode } from './ionic-global-9d5c8ee3.js';\nimport { c as createColorClasses } from './theme-ff3fc52f.js';\n\nconst avatarIosCss = \":host{border-radius:var(--border-radius);display:block}::slotted(ion-img),::slotted(img){border-radius:var(--border-radius);width:100%;height:100%;object-fit:cover;overflow:hidden}:host{--border-radius:50%;width:48px;height:48px}\";\n\nconst avatarMdCss = \":host{border-radius:var(--border-radius);display:block}::slotted(ion-img),::slotted(img){border-radius:var(--border-radius);width:100%;height:100%;object-fit:cover;overflow:hidden}:host{--border-radius:50%;width:64px;height:64px}\";\n\nconst Avatar = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return (h(Host, { class: getIonMode(this) }, h(\"slot\", null)));\n  }\n};\nAvatar.style = {\n  ios: avatarIosCss,\n  md: avatarMdCss\n};\n\nconst badgeIosCss = \":host{--background:var(--ion-color-primary, #3880ff);--color:var(--ion-color-primary-contrast, #fff);--padding-top:3px;--padding-end:8px;--padding-bottom:3px;--padding-start:8px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:inline-block;min-width:10px;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);font-size:13px;font-weight:bold;line-height:1;text-align:center;white-space:nowrap;contain:content;vertical-align:baseline}@supports (margin-inline-start: 0) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}:host(.ion-color){background:var(--ion-color-base);color:var(--ion-color-contrast)}:host(:empty){display:none}:host{border-radius:10px}\";\n\nconst badgeMdCss = \":host{--background:var(--ion-color-primary, #3880ff);--color:var(--ion-color-primary-contrast, #fff);--padding-top:3px;--padding-end:8px;--padding-bottom:3px;--padding-start:8px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:inline-block;min-width:10px;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);font-size:13px;font-weight:bold;line-height:1;text-align:center;white-space:nowrap;contain:content;vertical-align:baseline}@supports (margin-inline-start: 0) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}:host(.ion-color){background:var(--ion-color-base);color:var(--ion-color-contrast)}:host(:empty){display:none}:host{--padding-top:3px;--padding-end:4px;--padding-bottom:4px;--padding-start:4px;border-radius:4px}\";\n\nconst Badge = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(this.color, {\n        [mode]: true,\n      }) }, h(\"slot\", null)));\n  }\n};\nBadge.style = {\n  ios: badgeIosCss,\n  md: badgeMdCss\n};\n\nconst thumbnailCss = \":host{--size:48px;--border-radius:0;border-radius:var(--border-radius);display:block;width:var(--size);height:var(--size)}::slotted(ion-img),::slotted(img){border-radius:var(--border-radius);width:100%;height:100%;object-fit:cover;overflow:hidden}\";\n\nconst Thumbnail = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return (h(Host, { class: getIonMode(this) }, h(\"slot\", null)));\n  }\n};\nThumbnail.style = thumbnailCss;\n\nexport { Avatar as ion_avatar, Badge as ion_badge, Thumbnail as ion_thumbnail };\n","const hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return (typeof color === 'string' && color.length > 0) ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter(c => c != null)\n      .map(c => c.trim())\n      .filter(c => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach(c => map[c] = true);\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"sourceRoot":""}